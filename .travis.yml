language: shell

env:
  global:
    - VERSION=3.8.2
  # - ALIAS=nightly

# Wspólna konfiguracja dla jobów Linux
defaults_linux: &defaults_linux
  install:
    - pushd /opt/pyenv/
    - sudo git config --global --add safe.directory /opt/pyenv
    - sudo git checkout master
    - sudo git pull
    - popd
    - alias python=python3
    - pip install --upgrade pip setuptools virtualenv
    - |
      # "freeze" zamiast "list" aby uniknąć ostrzeżeń
      if (python -m pip freeze --user | cat | grep -qP '^virtualenv=='); then
        python -m pip install --upgrade --user virtualenv
      elif (python -m pip freeze | cat | grep -qP '^virtualenv=='); then
        sudo python -m pip install --upgrade virtualenv
      else
        sudo python -m pip install virtualenv
      fi
  before_script:
    - export INSTALL_DEST=${INSTALL_DEST:-/opt/python}
    - export LSB_RELEASE=${LSB_RELEASE:-$(lsb_release -rs)}
    - export OS_NAME=${OS_NAME:-$(lsb_release -is | tr "A-Z" "a-z")}
    - export ARCH=${ARCH:-$(uname -m)}
    - export PACKAGES=${PACKAGES:-pip nose pytest mock wheel pipenv dataclasses}
    - export PYTHON_CONFIGURE_OPTS="--with-wide-unicode --enable-shared --enable-ipv6 --enable-loadable-sqlite-extensions --with-computed-gotos $CONFIGURE_OPTS"
    - sudo chown -R $USER $HOME/.cache
    - |
      if [[ $VERSION = pypy*-dev ]]; then
        if ! [[ -f ~/virtualenv/pypy/bin/activate ]]; then
          curl -O https://s3.amazonaws.com/travis-python-archives/binaries/ubuntu/$(lsb_release -rs)/x86_64/pypy2.7-5.9.0.tar.bz2
          sudo tar xf pypy*.tar.bz2 -C /
        fi
        source ~/virtualenv/pypy/bin/activate
        python --version
      fi
  script:
    - sudo apt-get update && sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev curl libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev python3-dev gfortran libblas-dev liblapack-dev -y
    - ./bin/compile
  after_success: ./bin/archive
  after_failure: cat /tmp/python-build.*.log
  addons:
    apt:
      packages:
        - openssl
        - libssl-dev
        - mercurial
        - python3-pip
    artifacts:
      paths:
        - $LSB_RELEASE/
      target_paths:
        - /binaries/$OS_NAME/$LSB_RELEASE/$ARCH
      branch:
        - default
      cache_control: public

jobs:
  include:
    # Zadanie FreeBSD – własne polecenia install (używa pkg zamiast apt-get)
    - language: bash
      name: freebsd
      os: freebsd
      group: dev
      install:
        - pushd /opt/pyenv/
        - sudo git config --global --add safe.directory /opt/pyenv
        - sudo git checkout master
        - sudo git pull
        - popd
        - python --version
        - sudo python -m ensurepip
        - sudo python -m pip install --upgrade pip
        - sudo python -m pip install virtualenv==20.0.2
    
    - <<: *defaults_linux
      dist: noble
      env:
        - RELEASE=noble
      name: noble
      install:
        - pushd /opt/pyenv/
        - sudo git config --global --add safe.directory /opt/pyenv
        - sudo git checkout master
        - sudo git pull
        - popd
        - alias python=python3
        # utworzenie wirtualnego środowiska
        - python3 -m venv ~/.venv
        - source ~/.venv/bin/activate
        # aktualizacja pip, setuptools i virtualenv wewnątrz venv
        - pip install --upgrade pip setuptools virtualenv

    - <<: *defaults_linux
      arch: arm64
      dist: noble
      env:
        - RELEASE=noble
      name: noble-arm64

    - <<: *defaults_linux
      dist: jammy
      env:
        - RELEASE=jammy
      name: jammy

    - <<: *defaults_linux
      dist: focal
      env:
        - RELEASE=focal
      name: focal

    - <<: *defaults_linux
      dist: bionic
      env:
        - RELEASE=bionic
      name: bionic

    # Dla xenial używamy własnego bloku install, nadpisując część z defaults_linux
    - <<: *defaults_linux
      dist: xenial
      env:
        - RELEASE=xenial
      name: xenial
      install:
        - sudo apt-get update
        - sudo apt-get install -y build-essential libbz2-dev libreadline-dev libsqlite3-dev libffi-dev zlib1g-dev
        - python3 --version
        - python3 -m pip install --upgrade pip setuptools virtualenv

    # Wersje dla architektury ppc64le
    - <<: *defaults_linux
      arch: ppc64le
      dist: jammy
      env:
        - RELEASE=jammy
      name: jammy-ppc64le

    - <<: *defaults_linux
      arch: ppc64le
      dist: focal
      env:
        - RELEASE=focal
      name: focal-ppc64le

    - <<: *defaults_linux
      arch: ppc64le
      dist: bionic
      env:
        - RELEASE=bionic
        - NUMPY_VERSION=1.21.6
      name: bionic-ppc64le

    - <<: *defaults_linux
      arch: ppc64le
      dist: xenial
      env:
        - RELEASE=xenial
        - NUMPY_VERSION=1.21.6
      name: xenial-ppc64le

    - <<: *defaults_linux
      arch: s390x
      dist: jammy
      env:
        - RELEASE=jammy
      name: jammy-s390x

    - <<: *defaults_linux
      arch: s390x
      dist: focal
      env:
        - RELEASE=focal
      name: focal-s390x

    - <<: *defaults_linux
      arch: s390x
      dist: bionic
      env:
        - RELEASE=bionic
        - NUMPY_VERSION=1.21.6
      name: bionic-s390x
      
    - <<: *defaults_linux
      arch: s390x
      dist: xenial
      env:
        - RELEASE=xenial
        - NUMPY_VERSION=1.21.6
      name: xenial-s390x

    - <<: *defaults_linux
      arch: arm64
      dist: jammy
      env:
        - RELEASE=jammy
      name: jammy-arm64

    - <<: *defaults_linux
      arch: arm64
      dist: focal
      env:
        - RELEASE=focal
      name: focal-arm64

    - <<: *defaults_linux
      arch: arm64
      dist: bionic
      env:
        - RELEASE=bionic
      name: bionic-arm64

    - <<: *defaults_linux
      arch: arm64
      dist: xenial
      env:
        - RELEASE=xenial
      name: xenial-arm64
      
allow_failures:
  - name: freebsd
